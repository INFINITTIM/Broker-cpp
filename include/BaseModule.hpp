#pragma once

#include <cstddef>
#include <string>
#include <memory>
#include <iostream>

#include "BaseEvent.hpp"      
#include "EventHandlerInterface.hpp" 

class BaseModule : public EventHandlerInterface {
protected:
    size_t _id;
    std::string _name;

public:
    BaseModule(size_t id, const std::string& name) : _id(id), _name(name) {}
    virtual ~BaseModule() = default;

    // –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –º–µ—Ç–æ–¥ - –ö–ê–ñ–î–´–ô –º–æ–¥—É–ª—å –¥–æ–ª–∂–µ–Ω –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–≤–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏
    virtual void init_subscribes() = 0;

    // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ (–ø—Ä–æ—Å—Ç–æ –≤—ã–∑–æ–≤ –º–µ–Ω–µ–¥–∂–µ—Ä–∞)
    bool send(const EventPtr& event) {
        std::cout << "[" << _name << "] üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–±—ã—Ç–∏–µ: " << event->to_string() << std::endl;
        // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –≤—ã–∑–æ–≤ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        return true;
    }

    // –ì–µ—Ç—Ç–µ—Ä—ã
    size_t get_id() const { return _id; }
    const std::string& get_name() const { return _name; }
};